type User @entity (immutable: false){
  id: Bytes! # user address
  totalStaked: BigInt! # current total staked amount
  totalRewardsClaimed: BigInt! # lifetime rewards claimed
  stakeCount: BigInt! # number of times user has staked
  firstStakeTimestamp: BigInt! # when user first staked
  lastActivityTimestamp: BigInt! # last stake/unstake/claim
  isActive: Boolean! # currently has staked tokens
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsClaimed @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newPendingRewards: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Staked @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  currentRewardRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  currentRewardRate: BigInt! # uint256
  rewardsAccrued: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposited @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  newUserBalance: BigInt! # user's total staked after deposit
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type StakeWithdrawn @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  remainingBalance: BigInt! # user's remaining staked amount
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type EarlyWithdrawal @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  penaltyAmount: BigInt! # uint256
  actualReceived: BigInt! # amount after penalty
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
